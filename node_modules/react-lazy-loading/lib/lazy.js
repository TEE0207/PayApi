"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var hoistStatics = require("hoist-non-react-statics");
var react_1 = require("react");
// tslint:disable-next-line variable-name
function getDisplayName(WrappedComponent) {
    return WrappedComponent.displayName || WrappedComponent.name || 'Component';
}
function lazy(_a) {
    var isLoading = _a.isLoading, isFailed = _a.isFailed, renderLoading = _a.renderLoading, renderFailed = _a.renderFailed;
    return function (WrappedComponent) {
        var LazyLoaded = (function (_super) {
            __extends(LazyLoaded, _super);
            function LazyLoaded(props) {
                var _this = _super.call(this, props) || this;
                _this.rendered = false;
                return _this;
            }
            LazyLoaded.prototype.render = function () {
                if (!this.rendered) {
                    if (isFailed && isFailed(this.props)) {
                        return renderFailed ? renderFailed(this.props) : null;
                    }
                    if (isLoading(this.props)) {
                        return renderLoading ? renderLoading(this.props) : null;
                    }
                    this.rendered = true;
                }
                return react_1.createElement(WrappedComponent, this.props);
            };
            return LazyLoaded;
        }(react_1.Component));
        LazyLoaded.WrappedComponent = WrappedComponent;
        LazyLoaded.displayName = "LazyLoaded(" + getDisplayName(WrappedComponent) + ")";
        return hoistStatics(LazyLoaded, WrappedComponent);
    };
}
exports.default = lazy;
//# sourceMappingURL=lazy.js.map